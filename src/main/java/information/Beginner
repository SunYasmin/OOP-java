1-When should you use access specifiers in OOP?
    Access specifiers are reserved keywords in OOP used to control the accessibility of classes, methods, and other class members.
    A different name for it is access modifiers. Public, private, and protected are all included.
    In addition, there are additional language-specific access specifiers. Java, for instance, has a different access specifier default.
    These access specifiers are essential for achieving Encapsulation, one of the main goals of OOP.

OOP'ta erişim belirticilerini ne zaman kullanmalısınız?
Erişim belirticileri, OOP'ta sınıfların, yöntemlerin ve diğer sınıf üyelerinin erişilebilirliğini denetlemek için kullanılan
ayrılmış anahtar sözcüklerdir. Bunun farklı bir adı erişim değiştiricileridir. Genel, özel ve korumalı olanların tümü dahildir.
Ayrıca dile özgü ek erişim belirteçleri de vardır. Örneğin Java'nın farklı bir erişim belirtici varsayılanı vardır. Bu erişim belirteçleri,
OOP'nin ana hedeflerinden biri olan Kapsülleme'ye ulaşmak için gereklidir.


2-List down some characteristics of an abstract class.
  An abstract class is a restricted class in Java code that cannot be used to create objects. It is always utilized as a base class and cannot be instantiated. The following are the traits of an abstract class:

  Abstract classes can not be instantiated. They must be inherited.
  Abstract classes can have non-abstract and abstract methods.
  Abstract classes must have at least one declared abstract method.
  Abstract classes are always public.
  An abstract class's function is to offer a standard base class definition that many derived classes can use.

  Soyut bir sınıfın bazı özelliklerini listeleyin.
  Soyut sınıf, Java kodunda nesneler oluşturmak için kullanılamayan kısıtlı bir sınıftır. Her zaman temel sınıf olarak kullanılır ve somutlaştırılamaz. Soyut bir sınıfın özellikleri şunlardır:

  Soyut sınıflar başlatılamaz. Miras kalmış olmaları gerekir.
  Soyut sınıfların soyut olmayan ve soyut yöntemleri olabilir.
  Soyut sınıfların en az bir tane beyan edilmiş soyut yöntemi olmalıdır.
  Soyut sınıflar her zaman herkese açıktır.
  Soyut bir sınıfın işlevi, birçok türetilmiş sınıfın kullanabileceği standart bir temel sınıf tanımı sunmaktır.

3-How many types of inheritance are present in OOP?
  The following are the various types of inheritance in OOP:

  Single Inheritance: A single child inherits characteristics from a single parent.
  Multiple Inheritance: One class inherits features from more than one base class,
  which is not supported in Java, but the class can implement multiple interfaces.
  Multilevel Inheritance: In multilevel inheritance, a class can inherit from a derived class.
  This makes it the base class for a new class. For example, a child inherits behaviour from his father,
  and the father inherits characteristics from his father.
  Hierarchical Inheritance: Multiple subclasses inherit from a single class.
  Hybrid Inheritance: A hybrid inheritance is one that combines single and multiple inheritances.

  OOP'ta kaç tür kalıtım vardır?
  OOP'daki çeşitli kalıtım türleri şunlardır:

  Tek Kalıtım: Tek bir çocuk, tek bir ebeveynin özelliklerini miras alır.
  Çoklu Kalıtım: Bir sınıf, Java'da desteklenmeyen özellikleri birden fazla temel sınıftan devralır,
  ancak sınıf birden fazla arabirim uygulayabilir.
  Çok Düzeyli Kalıtım: Çok düzeyli kalıtımda, bir sınıf türetilmiş bir sınıftan miras alabilir.
  Bu onu yeni bir sınıf için temel sınıf yapar. Örneğin, bir çocuk davranışlarını babasından, baba da babasından özelliklerini miras alır.
  Hiyerarşik Kalıtım: Birden fazla alt sınıf, tek bir sınıftan miras alır.
  Hibrit Kalıtım: Hibrit kalıtım, tek ve çoklu kalıtımı birleştiren bir mirastır.

 4-Can we override static methods in Java?
   No, a static method is not overridable because it is not bound to an object. Instead,
   static methods are resolved at compile time using the reference variable type and belong to a class.

   However, you can declare the same static method in a subclass, which will cause method hiding,
   meaning that the new method will be called if you use a reference variable of the type subclass.
   Still, the old method will be called if you use a reference variable of type superclass.

   Java'daki statik yöntemleri geçersiz kılabilir miyiz?
   Hayır, statik bir yöntem, bir nesneye bağlı olmadığı için geçersiz kılınamaz.
   Bunun yerine, statik yöntemler derleme zamanında referans değişken türü kullanılarak çözümlenir ve bir sınıfa aittir.

   Bununla birlikte, aynı statik yöntemi bir alt sınıfta bildirebilirsiniz;
   bu, yöntemin gizlenmesine neden olur; bu,
   alt sınıf tipinin bir referans değişkenini kullanırsanız yeni yöntemin çağrılacağı anlamına gelir.
   Yine de süper sınıf türünde bir referans değişkeni kullanırsanız eski yöntem çağrılacaktır.

5-What are the types of variables in OOP?
  Mainly, there are three variables:

  Instance Variable: The Instance Variable is an object-level variable.
  Although it must be outside a method, block, and constructor,
  it must be declared inside a class. It is also created when an object is created using the new keyword.
  Moreover, it can be accessed directly by calling the variable name within the class.

  Static Variable: Static Variables are class-level variables.
  They must be outside the method, block, and constructor but are declared with the static keyword inside a class.
  It keeps things in fixed memory. It shares the same visibility as the instance variable.
  A static variable has the same default value as an instance variable. You access it by calling the class_name.variable_name.

  Local Variable: The Local Variable is a method-level variable.
  This can be declared in method, constructor, or block.
  Keep in mind that local variables cannot be used with access modifiers.
  Only the method, block, and constructor where it is declared have access to it.
  It is applied internally at the stack level. Therefore, it must be declared and initialized before use.
  On the other hand, the reference variable is a different kind of variable used in object-oriented programming.
  A reference variable is a variable that identifies a class object. It designates the spot where the object is kept in memory.

6-What is the difference between Encapsulation and Abstraction?

  The Object Oriented principle for Encapsulation is "encapsulate what varies,"
  and the principle for abstraction is "program to interfaces, not implementations."
  Abstraction provides a class's overall structure while leaving the specifics to the implementers.
  An object's permissions and limitations are created and defined through Encapsulation and the variables and methods that make up the object.
  Java uses interfaces and abstract classes to implement abstraction,
  whereas Encapsulation uses four different access level modifiers: public, protected, no modifier, and private.

7-What is the difference between Encapsulation and Abstraction?
  The Object Oriented principle for Encapsulation is "encapsulate what varies," and the principle for abstraction is "program to interfaces,
  not implementations."
  Abstraction provides a class's overall structure while leaving the specifics to the implementers.
  An object's permissions and limitations are created and defined through Encapsulation and the variables and methods that make up the object.
  Java uses interfaces and abstract classes to implement abstraction,
  whereas Encapsulation uses four different access level modifiers: public, protected, no modifier, and private.

